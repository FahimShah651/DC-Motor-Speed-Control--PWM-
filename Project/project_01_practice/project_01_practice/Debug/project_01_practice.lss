
project_01_practice.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000776  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006cf  00000000  00000000  00000a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030c  00000000  00000000  000010ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  000013fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003fe  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  00001876  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001908  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_1>
   8:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  88:	0c 94 c3 00 	jmp	0x186	; 0x186 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z8pwm_initv>:

unsigned int i;

void pwm_init() {
    // Set PWM pin (OC1A) as output
    DDRB |= (1 << DDB1);
  90:	84 b1       	in	r24, 0x04	; 4
  92:	82 60       	ori	r24, 0x02	; 2
  94:	84 b9       	out	0x04, r24	; 4
    // Fast PWM mode, non-inverted output
    TCCR1A = (1 << COM1A1) | (1 << WGM10) | (1 << WGM11);
  96:	83 e8       	ldi	r24, 0x83	; 131
  98:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    // No prescaler
    TCCR1B = (1 << WGM12) | (1 << CS10);
  9c:	89 e0       	ldi	r24, 0x09	; 9
  9e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  a2:	08 95       	ret

000000a4 <main>:
}

int main(void) {
	label:
    DDRB &= ~(1 << DDB0);
  a4:	84 b1       	in	r24, 0x04	; 4
  a6:	8e 7f       	andi	r24, 0xFE	; 254
  a8:	84 b9       	out	0x04, r24	; 4
    PORTB |= (1 << PORTB0);
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	81 60       	ori	r24, 0x01	; 1
  ae:	85 b9       	out	0x05, r24	; 5
    DDRC = 0xFF;
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	87 b9       	out	0x07, r24	; 7
    PORTC &= ~(1 << PORTC0);
  b4:	88 b1       	in	r24, 0x08	; 8
  b6:	8e 7f       	andi	r24, 0xFE	; 254
  b8:	88 b9       	out	0x08, r24	; 8
    i = 0; // Initial duty cycle for 50% speed
  ba:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  be:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
    pwm_init(); // Initialize PWM
  c2:	0e 94 48 00 	call	0x90	; 0x90 <_Z8pwm_initv>
    DDRD &= ~(1 << DDD2);
  c6:	8a b1       	in	r24, 0x0a	; 10
  c8:	8b 7f       	andi	r24, 0xFB	; 251
  ca:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (1 << PORTD2);
  cc:	8b b1       	in	r24, 0x0b	; 11
  ce:	84 60       	ori	r24, 0x04	; 4
  d0:	8b b9       	out	0x0b, r24	; 11
    DDRD &= ~(1 << DDD3);
  d2:	8a b1       	in	r24, 0x0a	; 10
  d4:	87 7f       	andi	r24, 0xF7	; 247
  d6:	8a b9       	out	0x0a, r24	; 10
    PORTD |= (1 << PORTD3);
  d8:	8b b1       	in	r24, 0x0b	; 11
  da:	88 60       	ori	r24, 0x08	; 8
  dc:	8b b9       	out	0x0b, r24	; 11

    // Falling edge of INT0 and INT1 generates an interrupt request
    EICRA = (1 << ISC01) | (1 << ISC11);
  de:	8a e0       	ldi	r24, 0x0A	; 10
  e0:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>

    // Enable external interrupts INT0 and INT1
    EIMSK = (1 << INT0) | (1 << INT1);
  e4:	83 e0       	ldi	r24, 0x03	; 3
  e6:	8d bb       	out	0x1d, r24	; 29

    sei();  // Enable global interrupts
  e8:	78 94       	sei
   
    while (1) {
       
        OCR1A = i; // Set PWM duty cycle
  ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  f2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  f6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	81 ee       	ldi	r24, 0xE1	; 225
  fe:	94 e0       	ldi	r25, 0x04	; 4
 100:	21 50       	subi	r18, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x5c>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x66>
 10a:	00 00       	nop
 10c:	ee cf       	rjmp	.-36     	; 0xea <main+0x46>

0000010e <__vector_1>:

    return 0;
}

// Interrupt Service Routine for INT0
ISR(INT0_vect) {
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
	if (i >=30)
 11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 120:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 124:	4e 97       	sbiw	r24, 0x1e	; 30
 126:	18 f0       	brcs	.+6      	; 0x12e <__vector_1+0x20>
	{
	PORTC &= ~(1 << PORTC0);
 128:	88 b1       	in	r24, 0x08	; 8
 12a:	8e 7f       	andi	r24, 0xFE	; 254
 12c:	88 b9       	out	0x08, r24	; 8
	}
    i += 30; // Increase duty cycle for higher speed
 12e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 132:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 136:	4e 96       	adiw	r24, 0x1e	; 30
 138:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 13c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <__vector_2>:

// Interrupt Service Routine for INT1
ISR(INT1_vect) {
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	8f 93       	push	r24
 15a:	9f 93       	push	r25
    i -= 30; // Decrease duty cycle for lower speed
 15c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 160:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 164:	4e 97       	sbiw	r24, 0x1e	; 30
 166:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 16a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
    if (i < 30) {
 16e:	4e 97       	sbiw	r24, 0x1e	; 30
 170:	18 f4       	brcc	.+6      	; 0x178 <__vector_2+0x2a>
 
			PORTC |= (1 << PORTC0);
 172:	88 b1       	in	r24, 0x08	; 8
 174:	81 60       	ori	r24, 0x01	; 1
 176:	88 b9       	out	0x08, r24	; 8
    }
}
 178:	9f 91       	pop	r25
 17a:	8f 91       	pop	r24
 17c:	0f 90       	pop	r0
 17e:	0f be       	out	0x3f, r0	; 63
 180:	0f 90       	pop	r0
 182:	1f 90       	pop	r1
 184:	18 95       	reti

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
